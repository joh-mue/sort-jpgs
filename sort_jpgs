#!/usr/bin/ruby

require 'exifr'
require 'fileutils'
require 'date'
require 'optparse'

def parse_options
  opts = { source: './', output: './', move: false }

  optparse = OptionParser.new do |parser|
    # banner that is displayed at the top
    parser.banner = "Usage: \b
    sort_jpgs [-h] [-s SOURCE_PATH] -o OUTPUT_PATH\n\n"

    ### options and what they do
    parser.on('-s', '--source-path DIR', 'Set the directory that contains files to be sorted. Default is PWD') do |source|
      opts[:source] = source
    end

    parser.on('-o', '--output-path DIR', 'Set the directory that the files will be written to.') do |output|
      opts[:output] = output
    end

    parser.on('-m', '--move', 'Move files instead of copying them.') do
      opts[:move] = true
    end

    parser.on('-t', '--threshold VALUE', Integer,'Set the size threshold that a picture has to meet in kB.') do |threshold|
      opts[:threshold] = threshold.to_i
    end

    # This displays the help screen
    parser.on_tail('-h', '--help', 'Display this screen.' ) do
      puts parser
      exit
    end

    opts
end

def increment_filename(existing_files)
  if existing_files.size == 10 # -> file-9.jpg
    filename = "#{pic.date_time.to_i}-10.jpg" # .succ ignores the '-'
  elsif existing_files.size == 1
    filename = "#{pic.date_time.to_i}-1.jpg")
  elsif existing_files.size > 1
    filenames = existing_files.map { |file| File.basename(file) }
    filename = filenames.sort.last.succ # increment the -x.jpg count
  end
end

# create directories if nonexistant
def create_target_dir(pic, output)
  year = pic.date_time.to_s[0,4] # e.g. "2013"
  month = pic.date_time.to_s[5,2]
  day = pic.date_time.to_s[8,2] # 2012-08-13
  target_dir = File.join(opts[:output], model, year, month, day)
  if !Dir.exist?(target_dir) then FileUtils.mkdirs target_dir end
  target_dir
end

opts = parse_options
Dir.chdir source_path

log = open("sort_jpgs_#{Time.now.to_i}.log", 'w')
log.puts("Log file for sort_jpgs from #{Time.now}")

files = Dir.glob "./*/*.jpg"
log.puts "#{files.count} files where found."

statistics = new Hash(0)

files = 0
files.each do |file|
  begin
    pic = EXIFR::JPEG.new(file)
    statistics[pic.model] += 1
    target_dir = create_target_dir(pic, opts[:output])

    # check if file already exists
    file_basename = "#{pic.date_time.to_i}"
    existing_files = Dir.glob("#{target_path}/{file_basename}*")
    if existing_files > 0
      file_basename = increment(existing_files)
    end

    # move file
    if opts[:move]
      FileUtils.move(file, File.join(target_dir, file_basename + ".jpg"))
    else
      FileUtils.copy(file, File.join(target_dir, file_basename + ".jpg"))
    end
    files += 1
  rescue
    log.puts "Exception was raised while handling #{file}. (probably an EXIFR::MalformedJPEG exception)"
  end
end

# print and/or save statistics to log file
log.puts "#{files} files were moved/copyed."
log.puts statistics
log.close
puts statistics
